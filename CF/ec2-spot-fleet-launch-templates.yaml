---
AWSTemplateFormatVersion: 2010-09-09
Description: Example of EC2 Spot Fleet using EC2 Launch Templates
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.1.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    vpc:
      CIDR: 10.0.0.0/16
  amazonLinuxAmi:
    us-east-1:
      AMI: ami-dea4d5a1 #EKS Node
    us-west-2:
      AMI: ami-73a6e20b #EKS Node

Metadata:
  Author:
    Description: Chad Schmutzer <schmutze@amazon.com>
  License:
    Description: 'Copyright 2017 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
Outputs:
  launchTemplatePublicSubnet1C3l:
    Value:
      Ref: launchTemplatePublicSubnet1C3l
  launchTemplatePublicSubnet1M3l:
    Value:
      Ref: launchTemplatePublicSubnet1M3l
  launchtemplatePublicSubnet2C3l:
    Value:
      Ref: launchtemplatePublicSubnet2C3l
  launchtemplatePublicSubnet2M3l:
    Value:
      Ref: launchtemplatePublicSubnet2M3l
  spotFleetId:
    Description: The Spot Fleet request ID
    Value:
      Ref: spotFleet
Parameters:
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 Instances
    Type: AWS::EC2::KeyPair::KeyName
  spotFleetTargetCapacity:
    Default: 1
    Description: Number of EC2 Spot Instances to initially launch in the Spot Fleet
    Type: Number
Resources:
  attachGateway:
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: AWS::EC2::VPCGatewayAttachment
  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway
  launchTemplatePublicSubnet1C3l:
    DependsOn:
    - publicSubnet1
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
          - amazonLinuxAmi
          - Ref: AWS::Region
          - AMI
        InstanceType: c3.large
        KeyName:
          Ref: keyName
        NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId:
            Ref: publicSubnet1
    Type: AWS::EC2::LaunchTemplate
  launchTemplatePublicSubnet1M3l:
    DependsOn:
    - publicSubnet1
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
          - amazonLinuxAmi
          - Ref: AWS::Region
          - AMI
        InstanceType: m3.large
        KeyName:
          Ref: keyName
        NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId:
            Ref: publicSubnet1
    Type: AWS::EC2::LaunchTemplate
  launchtemplatePublicSubnet2C3l:
    DependsOn:
    - publicSubnet2
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
          - amazonLinuxAmi
          - Ref: AWS::Region
          - AMI
        InstanceType: c3.large
        KeyName:
          Ref: keyName
        NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId:
            Ref: publicSubnet2
    Type: AWS::EC2::LaunchTemplate
  launchtemplatePublicSubnet2M3l:
    DependsOn:
    - publicSubnet2
    Properties:
      LaunchTemplateData:
        ImageId:
          Fn::FindInMap:
          - amazonLinuxAmi
          - Ref: AWS::Region
          - AMI
        InstanceType: m3.large
        KeyName:
          Ref: keyName
        NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId:
            Ref: publicSubnet2
    Type: AWS::EC2::LaunchTemplate
  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: AWS::EC2::Route
  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Properties:
      Tags:
      - Key: Name
        Value: Public Route Table
      VpcId:
        Ref: vpc
    Type: AWS::EC2::RouteTable
  publicSubnet1:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet1
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  publicSubnet2:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet2RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet2
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  spotFleet:
    DependsOn:
    - spotFleetRole
    - launchTemplatePublicSubnet1C3l
    - launchtemplatePublicSubnet2C3l
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole:
          Fn::GetAtt:
          - spotFleetRole
          - Arn
        LaunchTemplateConfigs:
        - LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: launchTemplatePublicSubnet1C3l
            Version: 1
        - LaunchTemplateSpecification:
            LaunchTemplateId:
              Ref: launchtemplatePublicSubnet2C3l
            Version: 1
        ReplaceUnhealthyInstances: true
        TargetCapacity:
          Ref: spotFleetTargetCapacity
        TerminateInstancesWithExpiration: true
    Type: AWS::EC2::SpotFleet
  spotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetTaggingRole
      Path: /
    Type: AWS::IAM::Role
  vpc:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
    Type: AWS::EC2::VPC
...